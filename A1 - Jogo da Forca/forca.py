# Trabalho 1
# Nome do Estudante:
estudante = 'Marlon da Silva'

import random, string, os

# -----------------------------------
# C√ìDIGO AUXILIAR
# -----------------------------------

ARQUIVO_LISTA_PALAVRAS = os.path.join(os.path.dirname(__file__), "palavras.txt")

def carregar_palavras():
    """
    SA√çDA: lista, uma lista de palavras v√°lidas.  As palavras
    s√£o strings em letra min√∫scula.

    Dependendo do tamanho da lista de palavras, esta fun√ß√£o pode
    demorar um pouco para terminar.
    """
    print("Carregando lista de palavras de arquivo...")
    # noArquivo: arquivo
    noArquivo = open(ARQUIVO_LISTA_PALAVRAS, 'r')
    # linha: string
    linha = noArquivo.readline()
    # lista_de_palavras: list of strings  
    lista_de_palavras = linha.split()
    print(" ", len(lista_de_palavras), "palavras carregadas.")
    return lista_de_palavras

def escolhe_palavra(lista_de_palavras):
    """
    ENTRADA: 'lista_de_palavras': uma lista de palavras (strings)
    SA√çDA: Uma palavra escolhida da lista
    """
    return random.choice(lista_de_palavras)

# -----------------------------------
# FIM DO C√ìDIGO AUXILIAR
# -----------------------------------

# Carrega a lista de palavras para ser acess√≠vel de qualquer parte do programa
lista_de_palavras = carregar_palavras()

def jogador_venceu(palavra_secreta, letras_escolhidas):
    """
    ENTRADA: 'palavra_secreta', uma string em letras min√∫sculas que o usu√°rio
             deve adivinhar
             'letras_escolhidas': lista de letras min√∫sculas que o jogador
             escolheu at√© agora para adivinhar a palavra
    SA√çDA: True, se todas as letras de 'palavra_secreta' est√£o em 
           'letras_escolhidas' e False caso contr√°rio
    """
    # ESCREVA SEU C√ìDIGO AQUI E APAGUE "pass":
    for letra in palavra_secreta:
        if letra not in letras_escolhidas:
            return False
    return True

def progresso_atual_da_palavra(palavra_secreta, letras_escolhidas):
    """
    ENTRADA: 'palavra_secreta', string em letra min√∫scula que usu√°rio est√°
             adivinhando.
             'letras_escolhidas', uma lista de letras min√∫sculas que o jogador
             escolheu at√© agora
    SA√çDA: Uma string formada por letras e asteriscos (*) que representam letras
           na palavra secreta que ainda n√£o foram adivinhadas
    """
    # ESCREVA SEU C√ìDIGO AQUI E APAGUE "pass":
    resultado = ''
    for letra in palavra_secreta:
        if letra in letras_escolhidas:
            resultado += letra
        else:
            resultado += '*'
    return resultado

def letras_ainda_disponiveis(letras_escolhidas):
    """
    ENTRADA: 'letras_escolhidas', lista de letras min√∫sculas que o usu√°rio
             escolheu at√© agora.
    SA√çDA: Uma string formada por todas as letras que ainda n√£o foram escolhidas.
           As letras devem ser retornadas em ordem alfab√©tica.
    """
    # ESCREVA SEU C√ìDIGO AQUI E APAGUE "pass":
    disponiveis = ''
    for letra in string.ascii_lowercase: # alfabeto min√∫sculo
        if letra not in letras_escolhidas:
            disponiveis += letra
    return disponiveis

def forca(palavra_secreta, com_ajuda):
    """
    ENTRADA: 'palavra_secreta', uma string representando uma palavra a ser
             adivinhada
             'com_ajuda', um valor booleano que ativa a funcionalidade de ajuda
             se verdadeiro

    Isso inicia um jogo interativo de Forca.

    * No come√ßo do jogo, deixe o usu√°rio saber quantas letras
      a string 'palavra_secreta' cont√©m e quantas tentativas ele tem de
      escolher letras.

    * O usu√°rio deve come√ßar com 10 tentativas.

    * Antes de cada rodada, voc√™ deve mostrar ao usu√°rio quantas tentativas
      ele ainda tem  e as letras que ele ainda n√£o escolheu.

    * Pe√ßa ao usu√°rio para escolher uma letra por rodada. Lembre-se de
      checar se o usu√°rio realmente est√° inserindo uma s√≥ letra (ou
      o caractere de ajuda  '!' se a funcionalidade de ajuda est√° ativa)

    * Se o usu√°rio escolher uma consoante incorreta, ele perde UMA tentativa,
      mas se ele escolher uma vogal incorreta (a, e, i, o, u),
      ent√£o ele perde DUAS tentativas.

    * O usu√°rio deve receber informa√ß√µes imediatamente
      ap√≥s cada tentativa de escolher uma letra para que ele saiba
      se a letra escolhida aparece na palavra secreta.

    * Depois de cada escolha, voc√™ deve mostrar ao usu√°rio a palavra
      parcialmente adivinhada at√© agora.

    -----------------------------------
    A funcionalidade 'com_ajuda' 
    -----------------------------------
    * Se a escolha for o s√≠mbolo !, voc√™ deve revelar ao usu√°rio uma das letras
      faltantes da palavra ao custo de 3 tentativas. Se o usu√°rio n√£o tem
      3 tentativas restantes, imprima uma mensagem de aviso. Do contr√°rio,
      adicione esta letra √† lista de letras adivinhadas e continue jogando
      normalmente.
    """
    # ESCREVA SEU C√ìDIGO AQUI E APAGUE "pass":
    tentativas = 10
    letras_escolhidas = []
    vogais = 'aeiou'

    print('====================================')
    print('BEM-VINDO AO JOGO DA FORCA! üíÄü™¢')
    print('A PALAVRA SECRETA TEM {} LETRA(S).'.format(len(palavra_secreta)))
    print('VOC√ä TEM 10 TENTATIVAS (‚≠ê) PARA ADIVINHAR A PALAVRA!')
    print('====================================')

    while tentativas > 0 and not jogador_venceu(palavra_secreta, letras_escolhidas):
      print('====================================')
      print('VOC√ä TEM {} TENTATIVA(S) RESTANTE(S)'.format(tentativas))
      print('LETRAS DISPON√çVEIS: {}.'.format(letras_ainda_disponiveis(letras_escolhidas)))

      palavra_atual = progresso_atual_da_palavra(palavra_secreta, letras_escolhidas)
      print('PALAVRA: {}.'.format(palavra_atual))

      escolha = input('POR FAVOR, ESCOLHA UMA LETRA: ').lower()

      if len(escolha) == 1:
          if escolha == '!' and com_ajuda:
              if tentativas >= 3:
                  tentativas -= 3
                  letra_revelada = ''
                  for letra in palavra_secreta:
                      if letra not in letras_escolhidas:
                          letras_escolhidas.append(letra)
                          letra_revelada = letra
                          break
                  if letra_revelada:
                      print('#AJUDA! A LETRA "{}" FOI REVELADA! VOC√ä PERDEU 3 TENTATIVAS!'.format(letra_revelada))
                  else:
                      print('N√ÉO H√Å MAIS LETRAS PARA REVELAR!')
              else:
                  print('VOC√ä N√ÉO TEM TENTATIVAS SUFICIENTES PARA USAR A AJUDA. TENTE NOVAMENTE!')
          elif escolha.isalpha():
              if escolha in letras_escolhidas:
                  print('OPSSS! VOC√ä J√Å ESCOLHEU A LETRA "{}". TENTE NOVAMENTE!'.format(escolha))
              elif escolha in palavra_secreta:
                  letras_escolhidas.append(escolha)
                  print('UHUL! VOC√ä ACERTOU UMA LETRA!')
              else:
                  letras_escolhidas.append(escolha)
                  if escolha in vogais:
                      tentativas -= 2
                      print('OPSSS! ESTA VOGAL N√ÉO EST√Å NA PALAVRA. VOC√ä PERDEU 2 TENTATIVAS (‚≠ê).')
                  else:
                      tentativas -= 1
                      print('OPSSS! ESTA CONSOANTE N√ÉO EST√Å NA PALAVRA. VOC√ä PERDEU 1 TENTATIVA (‚≠ê).')
          else:
              print('ENTRADA INV√ÅLIDA! DIGITE UMA LETRA!')
      else:
          print('ENTRADA INV√ÅLIDA! DIGITE APENAS UMA LETRA!')

    print('====================================')
    palavra_final = progresso_atual_da_palavra(palavra_secreta, letras_escolhidas)
    print('A PALAVRA ERA: {}.'.format(palavra_secreta))

    if jogador_venceu(palavra_secreta, letras_escolhidas):
        letras_distintas = len(set(palavra_secreta))
        tamanho_palavra = len(palavra_secreta)
        pontuacao = tentativas + (4 * letras_distintas) + (3 * tamanho_palavra)
        print('PARAB√âNS! VOC√ä VENCEU! üéä')
        print('SUA PONTUA√á√ÉO FINAL √â: {}.'.format(pontuacao))
    else:
        pontuacao = 0
        print('GAME OVER! VOC√ä PERDEU!')
        print('SUA PONTUA√á√ÉO FINAL √â: {}.'.format(pontuacao))

# Quando voc√™ terminar a fun√ß√£o 'forca', v√° at√© o fim do arquivo descomentando
# as linhas indicadas para poder testar seu jogo

if __name__ == "__main__":
    # Para testar seu jogo, descomente as seguintes 3 linhas:

    palavra_secreta = escolhe_palavra(lista_de_palavras)
    com_ajuda = True
    forca(palavra_secreta, com_ajuda)

    # Depois que voc√™ implementar a funcionalidade 'com_ajuda', mude
    # o valor de 'com_ajuda' acima para e tente testar usando "!" como
    # letra escolhida!

    ###############